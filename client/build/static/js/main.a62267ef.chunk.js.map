{"version":3,"sources":["Start.js","Game.js","HomePage.js","App.js","index.js"],"names":["Start","props","state","board_length","x_name","o_name","onXChange","bind","onOChange","onLengthChange","event","preventDefault","this","onNameXChange","onNameOChange","setState","target","value","Container","Form","onSubmit","Group","Label","Control","type","placeholder","onChange","min","Button","variant","React","Component","Square","position","style","className","onClick","Board","boardLength","i","winner","x","historyPos","squares","rows","r","s","push","renderSquare","id","Game","updateServerBoard","board","a","fetch","method","headers","body","JSON","stringify","response","status","Error","json","console","log","init","destroyServerBoard","history","Array","fill","move","stepNumber","xIsNext","endgame","check_clicked","over","slice","length","concat","calculateWinner","step","jumpTo","changeBtnColor","btn","$","on","click","mouseleave","current","map","desc","player","Math","floor","toString","onMouseEnter","btnMouseEnter","xName","oName","handleClick","last_move","x_pos","y_pos","unit_move","ret_val","num_point","d","x_dest","y_dest","HomePage","x_player","o_player","App","callBackendAPI","isOK","then","res","check_status","catch","err","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a62267ef.chunk.js","sourcesContent":["import React from \"react\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form'\r\nimport { Container } from 'react-bootstrap';\r\n\r\nclass Start extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        board_length: 0,\r\n        x_name: \"X\",\r\n        o_name: \"O\",\r\n      }\r\n      this.onXChange = this.onXChange.bind(this);\r\n      this.onOChange = this.onOChange.bind(this);\r\n      this.onLengthChange = this.onLengthChange.bind(this);\r\n    }\r\n  \r\n    onSubmit(event) {\r\n      event.preventDefault();\r\n      this.props.onNameXChange(this.state.x_name);\r\n      this.props.onNameOChange(this.state.o_name);\r\n      this.props.onLengthChange(this.state.board_length);\r\n    }\r\n  \r\n    onXChange(event) {\r\n      this.setState({\r\n        x_name: event.target.value,\r\n      });\r\n    }\r\n  \r\n    onOChange(event) {\r\n      this.setState({\r\n        o_name: event.target.value,\r\n      });\r\n    }\r\n  \r\n    onLengthChange(event) {\r\n      this.setState({\r\n        board_length: event.target.value,\r\n      });\r\n    }\r\n  \r\n    render() {\r\n      return (\r\n        <Container>\r\n          <Form onSubmit={(event) => this.onSubmit(event)} >\r\n            <Form.Group>\r\n              <Form.Label>Name of player 1 (plays X): </Form.Label>\r\n              <Form.Control type=\"text\" placeholder=\"X\" onChange={this.onXChange} />\r\n            </Form.Group>\r\n            <Form.Group>\r\n              <Form.Label>Name of player 2 (plays O): </Form.Label>\r\n              <Form.Control type=\"text\" placeholder=\"O\" onChange={this.onOChange} />\r\n            </Form.Group>\r\n            <Form.Group>\r\n              <Form.Label>Length of board: </Form.Label>\r\n              <Form.Control type=\"number\" min=\"5\" onChange={this.onLengthChange} />\r\n            </Form.Group>\r\n            <br />\r\n            <Button variant=\"primary\" type=\"submit\" >\r\n              Submit\r\n            </Button>\r\n          </Form>\r\n        </Container>\r\n      );\r\n    }\r\n}\r\n\r\nexport { Start };","import React from 'react';\r\nimport './Game.css';\r\nimport $ from 'jquery';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form'\r\nimport { Container } from 'react-bootstrap';\r\n\r\nfunction Square(props) {\r\n    return (\r\n        <button \r\n            position={props.position}\r\n            style={props.style}\r\n            className=\"square\" \r\n            onClick={props.onClick}\r\n        >\r\n            {props.value}\r\n        </button>\r\n    );\r\n}\r\n    \r\nclass Board extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            board_length: this.props.boardLength, \r\n        }\r\n    }\r\n  \r\n    renderSquare(i) {\r\n        let style = {};\r\n        if (this.props.winner) {\r\n            for (let x = 1; x <= 5; x++) if (i === this.props.winner[x]) style = {\"backgroundColor\": \"cyan\"};\r\n        } else if (this.props.historyPos === i) style = {\"backgroundColor\": \"red\"};\r\n        return (\r\n            <Square\r\n            position={i}\r\n            style={style}\r\n            value={this.props.squares[i]}\r\n            onClick={() => this.props.onClick(i)}\r\n            />\r\n        );\r\n    }\r\n    \r\n    render() {\r\n        const board_length = this.state.board_length;\r\n        let rows = [];\r\n        for (let r = 0; r < board_length; r++) {\r\n            let squares = [];\r\n            for (let s = 0; s < board_length; s++) {\r\n                squares.push(<span key={r*board_length + s}>{this.renderSquare(r*board_length + s)}</span>);\r\n            }\r\n            rows.push(<div key={r} className=\"board-row\">\r\n                {squares}\r\n            </div>);\r\n        }\r\n        return (\r\n            <div id=\"board\">\r\n                {rows}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n    \r\nclass Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            history: [{\r\n                squares: Array(this.props.boardLength*this.props.boardLength).fill(null),\r\n                move: -1,\r\n            }],\r\n            board_length: this.props.boardLength,\r\n            stepNumber: 0,\r\n            xIsNext: true,\r\n            endgame: false,\r\n        }\r\n        this.check_clicked = false; // determine whether time travel state is selected or not\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateServerBoard(this.state.history.squares);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.destroyServerBoard();\r\n    }\r\n  \r\n    changeBtnColor(over, event) {\r\n        if (over) event.target.variant = \"info\";\r\n        else event.target.variant = \"light\";\r\n    }\r\n  \r\n    updateServerBoard = async (board) => {\r\n        const response = await fetch('/game_room', {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(board)\r\n        });\r\n        if (response.status !== 200) throw Error(\"No proper response\");\r\n        const body = await response.json();\r\n        console.log(\"Res Board: \", body.board);\r\n        console.log(\"Init: \", body.init);\r\n    }\r\n\r\n    destroyServerBoard = async () => {\r\n        const response = await fetch('/game_room', {\r\n            method: \"DELETE\",\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n        });\r\n        if (response.status !== 200) throw Error(\"No proper response\");\r\n        console.log(\"Server board deleted\");\r\n    }\r\n  \r\n    handleClick(i) {\r\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n        const current = history[history.length - 1];\r\n        const squares = current.squares.slice();\r\n        if (this.state.endgame || squares[i]) return;\r\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n        this.updateServerBoard(squares);\r\n        this.setState({\r\n            history: history.concat([{\r\n                squares: squares,\r\n                move: i,\r\n            }]),\r\n            stepNumber: history.length,\r\n            xIsNext: !this.state.xIsNext, \r\n            endgame: (calculateWinner(squares, i, this.state.board_length) ? true : false),\r\n        });\r\n    }\r\n  \r\n    jumpTo(step) {\r\n        if (step === this.state.stepNumber) return;\r\n        this.setState({\r\n            stepNumber: step,\r\n            xIsNext: (step % 2) === 0,\r\n            endgame: false,\r\n        });\r\n    }\r\n  \r\n    btnMouseEnter(move, event) {\r\n        if (!this.check_clicked) this.jumpTo(move);\r\n        this.changeBtnColor(true, event);\r\n        let btn = \"#move\" + move + \" button\";\r\n        $(btn).on({\r\n            click: () => {\r\n                this.jumpTo(move);\r\n                this.changeBtnColor(false, event);\r\n                this.check_clicked = true;\r\n            }, \r\n            mouseleave: () => {\r\n                this.changeBtnColor(false, event);\r\n                if (!this.check_clicked) this.jumpTo(this.state.history.length - 1);\r\n            }\r\n        });\r\n    }\r\n  \r\n    render() {\r\n        const history = this.state.history;\r\n        const current = history[this.state.stepNumber];\r\n        const winner = calculateWinner(current.squares, current.move, this.state.board_length);\r\n    \r\n        let position = -1;\r\n        const move = history.map((step, move) => {\r\n            let desc = \"\";\r\n            if (move) {\r\n            let player = \"\";\r\n            for (let a = 0; a < this.state.board_length * this.state.board_length; a++) {\r\n                if (history[move].squares[a] !== history[move - 1].squares[a]) {\r\n                    player = history[move].squares[a];\r\n                    position = a;\r\n                    break;\r\n                }\r\n            }\r\n            desc = \"Go to move #\" + move + \": Player \" + player \r\n                    + \" moved (\" + (Math.floor(position / this.state.board_length)).toString() + \", \" + (position % this.state.board_length).toString() + \")\";\r\n            } else desc = \"Go to game start\";\r\n    \r\n            return (\r\n            <div key={move}>\r\n                <li id={\"move\" + move}>\r\n                <Button \r\n                    variant=\"outline-success\" \r\n                    onMouseEnter={(event) => {\r\n                    this.btnMouseEnter(move, event);\r\n                    }}\r\n                >{desc}</Button>\r\n                </li>\r\n                <br />\r\n            </div>\r\n            );\r\n        });\r\n    \r\n        let status;\r\n        if (winner) status = 'Winner: ' + (winner[0] === 'X' ? this.props.xName : this.props.oName);\r\n        else status = 'Next player: ' + (this.state.xIsNext ? this.props.xName + \" (plays X)\" : this.props.oName + \" (plays O)\");\r\n        return (\r\n            <Container>\r\n                <div className=\"game\">\r\n                    <div className=\"game-board\">\r\n                        <Board \r\n                            historyPos={this.state.history[this.state.stepNumber].move} // position played at the move\r\n                            winner={winner} // determine squares led to victory\r\n                            boardLength={this.state.board_length}\r\n                            squares={current.squares}\r\n                            onClick={(i) => this.handleClick(i)}\r\n                        />\r\n                    </div>\r\n                    <div className=\"game-info\">\r\n                        <Form.Label>{status}</Form.Label>\r\n                        <ol>{move}</ol>\r\n                    </div>\r\n                </div>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nfunction calculateWinner(squares, last_move, board_length) {\r\n    /* TODO */\r\n    /* \r\n      Assume the board is a Oxy coordinate, the most up-left square is the root\r\n      From the root, down to the most down-left square is Ox, and to the most up-right square is Oy. Position is displayed as (x_pos, y_pos)\r\n      To determine whether the winner exists, we get the last move from players, because it's the move which leads to victory if winner exists\r\n      There are at most 8 directions to move for each square, and two opposite ones form a pair of direction. We will iterate through each direction pair \r\n      If the iteration indicates there exists at least five consecutive points of the same player, then that player is the winner \r\n    */\r\n    const player = squares[last_move];\r\n    if (player == null) return null;\r\n    const [x_pos, y_pos] = [Math.floor(last_move / board_length), last_move % board_length];\r\n    const unit_move = [\r\n        [-1, 0], // up\r\n        [-1, 1], // up right\r\n        [0, 1], // right\r\n        [1, 1], // down right\r\n    ];\r\n    for (let i = 0; i < unit_move.length; i++) {\r\n        let ret_val = [player, last_move];\r\n        let num_point = 1;\r\n        let d;\r\n        for (d = 1; d <= 5; d++) {\r\n            let [x_dest, y_dest] = [x_pos + unit_move[i][0] * d, y_pos + unit_move[i][1] * d];\r\n            if (x_dest < 0 || x_dest > board_length || y_dest < 0 || y_dest > board_length) continue;\r\n            if (squares[x_dest * board_length + y_dest] === player) {\r\n                num_point++;\r\n                ret_val.push(x_dest * board_length + y_dest);\r\n            }\r\n            else break;\r\n        }\r\n        let r;\r\n        for (r = -1; r >= -5; r--) {\r\n            let [x_dest, y_dest] = [x_pos + unit_move[i][0] * r, y_pos + unit_move[i][1] * r];\r\n            if (x_dest < 0 || x_dest > board_length || y_dest < 0 || y_dest > board_length) continue;\r\n            if (squares[x_dest * board_length + y_dest] === player) {\r\n                num_point++;\r\n                ret_val.push(x_dest * board_length + y_dest);\r\n            }\r\n            else break;\r\n        }\r\n        if (num_point >= 5) return ret_val;\r\n    }\r\n    return null;\r\n}\r\n\r\nexport { Game };  ","import React from 'react';\r\nimport { Start } from './Start.js';\r\nimport { Game } from './Game.js';\r\n\r\nclass HomePage extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      board_length: 0,\r\n      x_player: \"X\",\r\n      o_player: \"O\",\r\n    };\r\n    this.onLengthChange = this.onLengthChange.bind(this);\r\n    this.onNameXChange = this.onNameXChange.bind(this);\r\n    this.onNameOChange = this.onNameOChange.bind(this);\r\n  }\r\n\r\n  onLengthChange(length) {\r\n    if (length < 5) return;\r\n    this.setState({\r\n      board_length: length,\r\n    });\r\n  }\r\n\r\n  onNameXChange(x_name) {\r\n    this.setState({\r\n      x_player: x_name,\r\n    });\r\n  }\r\n\r\n  onNameOChange(o_name) {\r\n    this.setState({\r\n      o_player: o_name,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.board_length === 0) {\r\n      return <Start \r\n        onLengthChange={this.onLengthChange}\r\n        onNameXChange={this.onNameXChange}\r\n        onNameOChange={this.onNameOChange}\r\n      />\r\n    } else {\r\n      return <Game \r\n        boardLength={this.state.board_length}\r\n        xName={this.state.x_player}\r\n        oName={this.state.o_player}\r\n      />\r\n    }\r\n  }\r\n}\r\n\r\nexport { HomePage };","import React, { Component} from 'react';\nimport { HomePage } from './HomePage.js';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isOK: false,\n    };\n  }\n\n  componentDidMount() {\n    this.callBackendAPI()\n        .then(res => this.setState({isOK: res.check_status}))\n        .catch(err => console.log(err)); \n  }\n\n  callBackendAPI = async () => {\n    const response = await fetch('/express_backend');\n    const body = await response.json();\n\n    if (response.status !== 200) {\n      throw Error(\"Error\");\n    }\n    return body;\n  };\n\n  render() {\n    if (this.state.isOK) {\n      return (\n        <HomePage />\n      );\n    } else {\n      return (\n        <h1>Error occurred, try again!</h1>\n      );\n    }\n  }\n}\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App.js';\r\n\r\nReactDOM.render(\r\n    <App />, \r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}